<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Veladan Programming Blog</title>
    <description>Veladan programming blog for all the programming issues I found.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 20 Nov 2016 19:36:46 +0100</pubDate>
    <lastBuildDate>Sun, 20 Nov 2016 19:36:46 +0100</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Long-Pomodoro Technique (republished)</title>
        <description>&lt;p&gt;The &lt;strong&gt;Pomodoro technique&lt;/strong&gt; is a great invention. Everyone who has used on occasionally has proven its usefulness. It’s a great way to avoid stress overload and stay focused throughout the day. It is also a support to avoid procrastination and keep track of your daily life.&lt;/p&gt;

&lt;p&gt;But all software developers with whom I have spoken, &lt;strong&gt;stopped using this technique&lt;/strong&gt;: despite being convinced of its benefits. The truth is that the Pomodoro technique does not make us feel &lt;strong&gt;sufficiently productive&lt;/strong&gt;. It works well, but the feeling is that you don’t work as much as could. The Pomodoro technique is faulty.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;Let’s do some maths. If a software developer needs to focus about 15 minutes after a break to continue its work and a full Pomodoro last for 25 minutes. Then, how many minutes has the developer to write code? Just 10 minutes. If we also include the rest time, we left about &lt;strong&gt;20 minutes out of 60&lt;/strong&gt; to be productive: too short. We all know that we can work harder. Sometimes we succeeded, even without realizing it and without stress problems. But why sometimes happened this?&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;The solution is to &lt;strong&gt;increase the duration of each Pomodoro&lt;/strong&gt; and their breaks. This does not undermine the principles of the Pomodoro technique. The technique can be used and remains effective. Only the duration of the different phases is changed. It is very important that the Long-Pomodoros last a maximum of &lt;strong&gt;90 minutes&lt;/strong&gt;: you can not be exceeded. If you do so, breaks must be a minimum of 20 minutes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;90 min. Pomodoro&lt;/li&gt;
  &lt;li&gt;20 min. rest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This period gives us a lot of time for developing our source code. It also &lt;strong&gt;avoids falling into states of stress and fatigue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A very important point to consider is the way we &lt;strong&gt;rest during the 20 minutes&lt;/strong&gt; period. Many took advantage of these rest periods to check email or to check Twitter, even to check the next task. The importance of the rest period is not its duration, but its quality. The most suitable is to use some relaxation techniques. The idea is to get away from everything. Put a blank mind and forget the rush and deadlines.&lt;/p&gt;

&lt;p&gt;It’s recommended work only four-and-a-half hours a given day, in order to avoid exhaustion and recover on a daily or weekly basis.&lt;/p&gt;

&lt;h2 id=&quot;the-science-behind&quot;&gt;The science behind&lt;/h2&gt;

&lt;p&gt;The reason we get &lt;strong&gt;stressed&lt;/strong&gt; when we concentrates for long is &lt;strong&gt;cortisol&lt;/strong&gt;. Human beings are not physically prepared to work long periods of time on tasks that require mental concentration. When the body detects this &lt;strong&gt;excessive attention&lt;/strong&gt; to something, starts generating cortisol. This is the substance that makes us feel tired. It puts us on alert. It makes us feel that something bad is happening.&lt;/p&gt;

&lt;p&gt;Scientists have proven that the maximum period of concentration on a task is 90 minutes. From the moment you try to avoid further brain thinking, for it generates this cortisol.&lt;/p&gt;

&lt;h2 id=&quot;related-info&quot;&gt;Related info&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.bufferapp.com/optimal-work-time-how-long-should-we-work-every-day-the-science-of-mental-strength&quot;&gt;The Origin of the 8-Hour Work Day and Why We Should Rethink It By Leo Widrich&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.bufferapp.com/5-ways-to-get-more-done-by-working-smarter-not-harder&quot;&gt;5 Unusual Ways to Start Working Smarter, Not Harder, Backed by Science&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.es/Vivir-es-un-asunto-urgente-ebook/dp/B008U4XE2E/ref=sr_1_1?ie=UTF8&amp;amp;qid=1432105788&amp;amp;sr=8-1&amp;amp;keywords=vivir+es+un+asunto+urgente&quot;&gt;Vivir es un asunto urgente&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.es/Reinventarse-Actual-Mario-Alonso-Puig-ebook/dp/B00HRY023M/ref=sr_1_1?ie=UTF8&amp;amp;qid=1432105798&amp;amp;sr=8-1&amp;amp;keywords=reinventarse&quot;&gt;Reinventarse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.payscale.com/career-news/2016/11/never-work-longer-ninety-minutes-time&quot;&gt;This Is Why You Shouldn’t Work For More Than 90 Minutes at a Time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/IMG_0011.jpg&quot; alt=&quot;Circadian rythms&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Nov 2016 19:00:00 +0100</pubDate>
        <link>http://localhost:4000/2016/11/20/long-pomodoro-technique-republish/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/20/long-pomodoro-technique-republish/</guid>
        
        
      </item>
    
      <item>
        <title>How to generate an static web from a Rails project</title>
        <description>&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; &lt;em&gt;This method only works if the output static web files are served from a web server and the files are served from the root directory of the web server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Precompile assets with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake assets:precompile&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Open config/enviroments/production.rb and change the following attribute to &lt;strong&gt;true&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serve_static_assets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Run the server in production mode&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails s -e production&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then execute &lt;strong&gt;wget&lt;/strong&gt; command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget -P static -nH -m http://localhost:3000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;-P&lt;/strong&gt; prefix directory. the base directory to write web&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-nH&lt;/strong&gt; no-host-directories. Don’t create the base direcotry with the site name&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-m&lt;/strong&gt; man mirror equivalent to -r -N -l inf –no-remove-listing&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 16 Sep 2016 14:02:00 +0200</pubDate>
        <link>http://localhost:4000/2016/09/16/generate-static-web-from-rails/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/16/generate-static-web-from-rails/</guid>
        
        
      </item>
    
      <item>
        <title>MVVM architecture pattern in iOS (improved)</title>
        <description>&lt;p&gt;Inspired by &lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.8t6ex2n88&quot;&gt;this&lt;/a&gt; post, I tried to develop an app using the MVVM architecture pattern.&lt;/p&gt;

&lt;p&gt;This architecture pattern presents three different parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A View&lt;/li&gt;
  &lt;li&gt;A Model&lt;/li&gt;
  &lt;li&gt;A ViewModel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The view is the responsible of interact with the UI. In iOS is de &lt;em&gt;UIView&lt;/em&gt; and &lt;em&gt;UIViewController&lt;/em&gt; classes. The &lt;strong&gt;Model&lt;/strong&gt; represent the data to be managed. An the &lt;strong&gt;ViewModel&lt;/strong&gt; becomes an interactor between &lt;strong&gt;Model&lt;/strong&gt; and &lt;strong&gt;View&lt;/strong&gt;. But the special thing is how thos interactor is managed by the &lt;strong&gt;View&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ViewModel&lt;/strong&gt; must declare a variable for each data that must be showed in the &lt;strong&gt;View&lt;/strong&gt;. Then the &lt;strong&gt;View&lt;/strong&gt; must declare a &lt;em&gt;observer&lt;/em&gt; of the variable. This &lt;em&gt;observer&lt;/em&gt; is invoked everytime the variable change, and then the &lt;strong&gt;View&lt;/strong&gt; must present the new value to the user. Like the following code example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;class GreetingViewModel : ViewModel {
    let person: Person
    var greeting: String? {
        didSet {
            self.greetingDidChange?(self)
        }
    }
    var greetingDidChange: ((GreetingViewModelProtocol) -&amp;gt; ())?
    required init(person: Person) {
        self.person = person
    }
    func showGreeting() {
        self.greeting = &quot;Hello&quot; + &quot; &quot; + self.person.firstName + &quot; &quot; + self.person.lastName
    }
}

class GreetingViewController : UIViewController {
    var viewModel: GreetingViewModelProtocol! {
        didSet {
            self.viewModel.greetingDidChange = { [unowned self] viewModel in
                self.greetingLabel.text = viewModel.greeting
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Declaring a &lt;strong&gt;ViewModel&lt;/strong&gt; this way we must design a concrete class for each &lt;strong&gt;View&lt;/strong&gt;. This class must declare every data that the &lt;strong&gt;View&lt;/strong&gt; requires. The &lt;strong&gt;ViewModel&lt;/strong&gt; can preprocess every data before present it: like translate text, compound mixed strings(name, surname), change meassurament units, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ViewModel&lt;/strong&gt; can be also responsible for controlling navigation of the &lt;strong&gt;Views&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The benefits of this design are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Separate responsabilities. &lt;strong&gt;View&lt;/strong&gt; can be the only responsible of managing the UI.&lt;/li&gt;
  &lt;li&gt;Testability. Separating the &lt;strong&gt;Model&lt;/strong&gt; from the &lt;strong&gt;View&lt;/strong&gt; using a third class is the best way to test any of both without the other.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried this achitecture in an app, and I really liked it.&lt;/p&gt;

&lt;h2 id=&quot;improvement&quot;&gt;Improvement&lt;/h2&gt;

&lt;p&gt;Instead of creating one &lt;em&gt;didChangeXXXXXX&lt;/em&gt; method for every property in the &lt;strong&gt;ViewModel&lt;/strong&gt;, create one method didChange as an map of mehtods and use an &lt;em&gt;enum&lt;/em&gt; as the index of the map.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;enum GreetingViewField {
    case greeting
    case thing
    case price
}

protocol GreetingViewModelProtocol: class {
    var greeting: String? { get }
    var thing: String? { get }
    var price: String? { get }
    var didChange: [GreetingViewField:((GreetingViewModelProtocol) -&amp;gt; ())] { get set }
    init(person: Person)
    func show(field: GreetingViewField)
}

class GreetingViewModel: GreetingViewModelProtocol {
    let person: Person
    var greeting: String? {
        didSet {
            self.didChange[GreetingViewField.greeting]?(self)
        }
    }
    var thing: String? {
        didSet {
            self.didChange[GreetingViewField.thing]?(self)
        }
    }
    var price: String? {
        didSet {
            self.didChange[GreetingViewField.price]?(self)
        }
    }
    var didChange: [GreetingViewField:((GreetingViewModelProtocol) -&amp;gt; ())] = [:]
    required init(person: Person) {
        self.person = person
    }
    func show(field: GreetingViewField) {
        switch field {
        case .greeting:
            self.greeting = &quot;Hello&quot; + &quot; &quot; + self.person.firstName + &quot; &quot; + self.person.lastName
        case .thing:
            self.thing = &quot;Bye&quot; + &quot; &quot; + self.person.firstName + &quot; &quot; + self.person.lastName
        case .price:
            self.price = &quot;3.8&quot;
        }
        
    }
}


class GreetingViewController: UIViewController {
    @IBOutlet weak var greetingLabel: UILabel!
    @IBOutlet weak var showGreetingButton: UIButton!
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        self.showGreetingButton.addTarget(self, action: #selector(GreetingViewController.showGreeting), forControlEvents: .TouchUpInside)
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    var viewModel: GreetingViewModelProtocol! {
        didSet {
            self.viewModel.didChange[.greeting] = { [unowned self] viewModel in
                self.greetingLabel.text = viewModel.greeting
            }
        }
    }
    @objc func showGreeting() {
        viewModel.show(.greeting)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Mon, 08 Aug 2016 14:02:00 +0200</pubDate>
        <link>http://localhost:4000/2016/08/08/mvvm-ios-architecture-pattern/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/08/08/mvvm-ios-architecture-pattern/</guid>
        
        
      </item>
    
      <item>
        <title>Launch a clean Rails server every time the Xcode unit test are launched</title>
        <description>&lt;p&gt;If you need to launch a Rails server in order to execute some Unit Tests from Xcode, you can use this method.&lt;/p&gt;

&lt;p&gt;You must add this two scripts to the Scheme of the project, &lt;strong&gt;Pre-actions&lt;/strong&gt; and &lt;strong&gt;Post-actions&lt;/strong&gt; inside the Test section:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/xcode-test-acheme-scripts.png&quot; alt=&quot;xcode test scheme scripts&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pre-actions&quot;&gt;Pre-actions&lt;/h2&gt;

&lt;p&gt;This is the script you must add to the &lt;strong&gt;Pre-actions&lt;/strong&gt; section:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;osascript -e 'tell application &quot;Terminal&quot;' -e 'delay 0.5' -e &quot;set currentTab to do script (\&quot;cd $SRCROOT/__RAILSDIR__ &amp;amp;&amp;amp; bundle exec rake db:reset RAILS_ENV=test &amp;amp;&amp;amp; rails server -e test\&quot;)&quot; -e 'end tell' &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;IMPORTANT: change &lt;strong&gt;RAILSDIR&lt;/strong&gt; string for the path where your rails project is stored. This script expects that this dir is a subdirectory of the xcode project directory. If the rails code is in other path, change cd $SRCROOT/&lt;strong&gt;RAILSDIR&lt;/strong&gt; for the complete path of the rails project.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that the rails server is launched in the test enviroment, you can change this easily.&lt;/p&gt;

&lt;p&gt;To allow the script to know the values of the project environment variables, you must provide the build settings, selecting the proper scheme:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/script-rails-pre-action.png&quot; alt=&quot;xcode test scheme scripts enviroment pre&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;post-actions&quot;&gt;Post-actions&lt;/h2&gt;

&lt;p&gt;This is the script you must add to the &lt;strong&gt;Post-actions&lt;/strong&gt; section:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;osascript -e 'tell application &quot;Terminal&quot;' -e 'delay 0.5' -e &quot;set currentTab to do script (\&quot;cd $SRCROOT/__RAILSDIR__ &amp;amp;&amp;amp; kill -INT \$(cat tmp/pids/server.pid)\&quot;)&quot; -e 'end tell' &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;IMPORTANT: change &lt;strong&gt;RAILSDIR&lt;/strong&gt; string for the path where your rails project is stored. This script expects that this dir is a subdirectory of the xcode project directory. If the rails code is in other path, change cd $SRCROOT/&lt;strong&gt;RAILSDIR&lt;/strong&gt; for the complete path of the rails project.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that the rails server is killed.&lt;/p&gt;

&lt;p&gt;To allow the script to know the values of the project environment variables, you must provide the build settings, selecting the proper scheme:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/script-rails-post-action.png&quot; alt=&quot;xcode test scheme scripts enviroment post&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Apr 2016 14:02:00 +0200</pubDate>
        <link>http://localhost:4000/2016/04/07/run-rails-from-tests/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/04/07/run-rails-from-tests/</guid>
        
        
      </item>
    
      <item>
        <title>La Arquitectura Limpia</title>
        <description>&lt;p&gt;Esto es una traducción al idioma español del artículo de Uncle Bob: &lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;The Clean Architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/CleanArchitecture-81565aba46f035911a5018e77a0f2d4e.jpg&quot; alt=&quot;The Clean Arquitecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A lo largo de los últimos años hemos visto un amplio conjunto de ideas acerca de la arquitectura de los sistemas. Estos incluyen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://alistair.cockburn.us/Hexagonal+architecture&quot;&gt;Hexagonal Architecture&lt;/a&gt; (también conocido como Puertos y Adaptadores) por Alistair Cockburn y adoptado por Steve Freema y Nat Pryce en su fantástico libro &lt;a href=&quot;http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627&quot;&gt;Growing Object Oriented Software&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jeffreypalermo.com/blog/the-onion-architecture-part-1/&quot;&gt;Onion Architecture&lt;/a&gt; por Jeffrey Palermo&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2011/09/30/Screaming-Architecture.html&quot;&gt;Screaming Arquitecture&lt;/a&gt; de mi blog del año pasado&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Lean-Architecture-Agile-Software-Development/dp/0470684208/&quot;&gt;DCI&lt;/a&gt; de James Coplien y Trygve Reenskaug&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Object-Oriented-Software-Engineering-Approach/dp/0201544350&quot;&gt;BCE&lt;/a&gt; por Ivar Jacobson de su libro Object Oriented Software Engineering: A Use-Case Driven Approach&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todas estas aquitecturas aunque varían en algunos de sus detalles, son muy similares. Todas ellas tienen el mismo objetivo, el cual es la separación de los asuntos. Todos ellos consiguen esta separación dividiendo el software en capas. Cada cual tiene al menos una capa para la reglas de negocio y otro para los interfaces.&lt;/p&gt;

&lt;p&gt;Cada una de estas arquitecturas producen sistemas que son:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Independientes de los Frameworks. La arquitectura no depende de la existencia de cierta librería llena de características. Esto te permite usar esos frameworks como herramientas, en vez de tener que atiborrar tu sistema de sus limitadas restricciones.&lt;/li&gt;
  &lt;li&gt;Testeable, Las reglas de negocio pueden ser testeadas sin el IU, base de datos, servidor web, o cualquier otros elemento externo.&lt;/li&gt;
  &lt;li&gt;Independientes de IU. El IU puede cambiar facilmente, sin cambier el resto del sistema. Un IU web podría ser reemplezado por un IU de consola, por ejemplo, sin cambiar las reglas de negocio.&lt;/li&gt;
  &lt;li&gt;Independiente de la base de datos. Puedes cambiar Oracle o SQL Server por Mongo, BigTable, CouchDB, o cualquier otro. De hecho tus reglas de negocio no están atadas a la base de datos.&lt;/li&gt;
  &lt;li&gt;Independiente de cualquier agencia externa. De hecho tus reglas de negocio simplemente no saben nada acerca del resto del mundo.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;la-regla-de-dependencia&quot;&gt;La Regla de Dependencia&lt;/h2&gt;

&lt;p&gt;Los círculos concentricos representan diferentes areas del software. En general, cuanto más lejos llegas, mayor es el nivel del software. Lo círculos externos son mecanismos. Los círculos internos son políticas.&lt;/p&gt;

&lt;p&gt;La norma principal que hace funcionar esta arquitectura es la &lt;em&gt;Regla de Dependencia&lt;/em&gt;. Esta regla dice que las &lt;em&gt;dependencias del código fuente&lt;/em&gt; solo pueden apuntar hacia adentro. Nada dentro de un círculo puede saber algo de un círculo externo. En particular, el nombre de algo declarado en un círculo externo no debe ser mencionado por el código en un círculo interno. Esto incluye, funciones, clases, variables o cualquier otro entidad de software con nombre.&lt;/p&gt;

&lt;p&gt;Por el mismo motivo, los formatos de datos usados en un círculo exterior no deben ser usados en un círculo interior, especialmente si esos formatos son generados por un framework de un círculo externo. No queremos que nada de un círculo externo impacte en los círculos internos.&lt;/p&gt;

&lt;h2 id=&quot;entidades&quot;&gt;Entidades&lt;/h2&gt;

&lt;p&gt;Las entidades encapsulan las reglas de negocio de toda la empresa. Una entidad puede ser un objeto con métodos o puede ser un conjunto de datos y funciones. No importa mucho si las entidades podrían ser usadas en muchas aplicaciones diferentes de la empresa.&lt;/p&gt;

&lt;p&gt;Si no tienes una empresa y solo escribes una aplicación unitaria, entonces estas entidades son los objetos de negocio de la aplicación. Encapsulan las más generales y principales reglas. Son lo que probablemente no cambie debido a cambios externos. Por ejemplo: no puedes esperar que estos objetos cambien por un cambio en el método de paginación o la seguridad. Ningún cambio operacional a una aplicación debería afectar a la capa de entidad.&lt;/p&gt;

&lt;h2 id=&quot;casos-de-uso&quot;&gt;Casos de Uso&lt;/h2&gt;

&lt;p&gt;El software en esta capa contiene reglas de negocio &lt;em&gt;específicas de la aplicación&lt;/em&gt;. Encapsula e implementa todos los casos de uso del sistema. Estos casos de uso orquestam le flujo de datos a y desde las entidades y dirije esas entidades a usar sus relgas de negocio de empresa para conseguir los objetivos del caso de uso.&lt;/p&gt;

&lt;p&gt;No esperamos que los cambios en esta capa afecten a las entidades. Tampoco esperamos que esta capa sea afectada por los cambios de esternalidades como la base de datos, el IU o ninguno de los frameworks. Esta capa está aislada de tales asuntos.&lt;/p&gt;

&lt;p&gt;Sin embargo, esperamos que cambios en la operativa de la aplicación afecten los casos de uso y por consiguiente el software de esta capa. Si los detalles de un caso de uso cambian, entonces algún código de esta capa muy probablemente sea afectado.&lt;/p&gt;

&lt;h2 id=&quot;adaptadores-de-interfaz&quot;&gt;Adaptadores de Interfaz&lt;/h2&gt;

&lt;p&gt;El software en esta capa es un conjunto de adaptadores que convierten datos desde el formato más conveniente para los casos de uso y las entidades, al formato más conveniente para algunos elementos externos como la base de datos o la web. Es esta capa, por ejemplo, la que contendrá por completo la arquitectura MVC del interfáz gráfico de usuario. Los Presentadores, Vistas y Controladores todos pertenecen aquí. Los modelos son nada más que estructuras de datos que son pasadas desde los controladores a los casos de usuario y devuelta desde los casos de uso a los presentadores y vistas.&lt;/p&gt;

&lt;p&gt;Similarmente, los datos son convertidos en esta capa, desde los más convenientes para entidades y casos de uso, en la forma más conveniente para cualquier framework de persistencia que sea usado. Por ejemplo: la base de datos. Ningún código dentro de este círculo debe saber nada de la base de datos. Si la base de datos es una base de datos SQL, entonces todo el SQL debe estar restringido a esta capa y particularmente a esta capa que tiene que trabajar con la base de datos.&lt;/p&gt;

&lt;p&gt;También en esta capa se encuentra cualquier adaptador necesrio para convertir datos desde alguna fuente, como un servicio externo, para la forma interna usada por caso de uso y entidades.&lt;/p&gt;

&lt;h2 id=&quot;frameworks-y-drivers&quot;&gt;Frameworks y Drivers&lt;/h2&gt;

&lt;p&gt;El capa más externa es generalmente compuesta por frameworks y herramientas tales como la base de datos, el framework web, etc. Generalmente no sueles escribir mucho código en esta capa otro que pegamento que comunica con el siguiente circulo interno.&lt;/p&gt;

&lt;p&gt;Esta capa es donde todos los detalles van. La web es un detalle. La base de datos es un detalle. Mantenemos estas cosas fuera donde pueden hacer poco daño.&lt;/p&gt;

&lt;h2 id=&quot;slo-cuatro-cculos&quot;&gt;¿Sólo cuatro cículos?&lt;/h2&gt;

&lt;p&gt;No, los círculos son esquemáticos. Puedes necesitar más de estas cuatro capas. No hay ninguna regla que diga que debas usar siempre estas cuatro capas. Sin embargo, &lt;em&gt;La Regla de Dependencia&lt;/em&gt; siempre se aplica. la dependencias de código fuente siempre apuntan hacia adentro. Cuanto más adentro, más aumenta el nivel de abstración. El círculo más externo es muy bajo en detalles contretos. Al moverte hacia adentro el software aumenta su nivel de abstración y encapsula políticas de más alto nivel. El círculo interno es el más general.&lt;/p&gt;

&lt;h2 id=&quot;cruzando-lmites&quot;&gt;Cruzando límites&lt;/h2&gt;

&lt;p&gt;En la esquina inferior derecha del diagrama hay un ejemplo de como cruzamos los límites de los círculos. Muestra a los Controladores y Presentadores comunicando con los Casos de Uso de la siguiente capa. Fíjate el control de flujo. Empieza en el controlador, se mueve a través del caso de uso y concluye la ejecución en el presentador. Comprueba también las dependencia de código fuent. Cada una de ella apunta hacia adentro hacia los casos de uso.&lt;/p&gt;

&lt;p&gt;Usualmente resolvemos esta aparente contradicción usando el &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;Principio de Dependencia Inversa&lt;/a&gt;. En un lenguaje como Java, por ejemplo, organizaríamos interfaces y relaciones de herencia tales que las dependencias de código fuente se opusieran la control de flujo en los puntos correctos a través de los límites.&lt;/p&gt;

&lt;p&gt;Por ejemplo, considera que el caso de uso requiera llamar al presentador. Sin embargo, esta llamada no debe ser directa porque violaría &lt;em&gt;La Regla de Dependencia&lt;/em&gt;: Ningún nombre el un círculo externo debe conocer puede ser mencionado en un círculo interno. Así pues tenemos que el caso de uso invoca un interfaz (Mostrado aquí como Use Case Ouput Port) en el cículo interno y tiene el presentador en el circulo externo que lo implementa.&lt;/p&gt;

&lt;p&gt;La misma técnica es usada a través de todas las fronteras en la arquitectura. Aprovechamos el polimorfismo dinámico para crear dependencias de código fuente que se opongan al control de flujo de tal manera que podamos cumplir &lt;em&gt;La Regla de Dependencia&lt;/em&gt; no importa qué dirección lleve el control de flujo.&lt;/p&gt;

&lt;h2 id=&quot;qu-datos-cruzan-las-fronteras&quot;&gt;Qué datos cruzan las fronteras&lt;/h2&gt;

&lt;p&gt;Típicamente los datos que cruzan las fronteras son estructuras de datos simples. Puedes usar estructuras básicas o simples objetos de Transferencia de Datos que prefieras. O los datos puedan ser simplemente argumentos de funciones. O puedes empaquetarlos en mapas o contruirlos como objeto. Lo importante es que solo pase a travé de las fronteras datos independientes y simples. No queremos hacer trampa y pasar &lt;em&gt;Entidades&lt;/em&gt; o filas de base de datos. No queremos que las estructuras de datos de ningún tipo violen &lt;em&gt;La Regla de Dependencia&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por ejemplo, muchos frameworks de bases de datos devuelven datos formateados como respuesta a una petición. Podríamos llamar a esto EstructuraDeFila. No queremos pasar esa estructura de fila dentro a traves de una frontera. Eso violaría &lt;em&gt;La Regla de Dependencia&lt;/em&gt; porque forzaría al círculo interno a conocer algo acerca de un círculo externo.&lt;/p&gt;

&lt;p&gt;Por lo que cuando pasamos datos através de fronteras, siempre debe ser en la forma más conveniente para el círculo interno.&lt;/p&gt;

&lt;h2 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Aplicar estas simples reglas no es difícil y te pueden ahorrar muchos dolores de cabeza en el futuro. Separar el software en capas y aplicando &lt;em&gt;La Regla de Dependencia&lt;/em&gt;, puedes crear un sistema que sea testeable inrinsecamente, con todos los beneficios que implica. Cuando alguna de la partes externas quede obsoleta, como la base de datos o el framework web, puedes reemplazar estos elementos obsoletos con un mínimo de jaleo.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Mar 2016 14:02:00 +0200</pubDate>
        <link>http://localhost:4000/2016/03/29/clean-architecture/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/03/29/clean-architecture/</guid>
        
        
      </item>
    
      <item>
        <title>App Transport Security has blocked a cleartext HTTP prevent http queries to success</title>
        <description>&lt;p&gt;if you see this message un your app log:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app’s Info.plist file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You must add some configuration to your &lt;project&gt;.plist file.&lt;/project&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Short version&lt;/strong&gt; allow all:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
  &amp;lt;!--Include to allow all connections (DANGER)--&amp;gt;
  &amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;
      &amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Extended version&lt;/strong&gt; allow only some domains:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
  &amp;lt;key&amp;gt;NSExceptionDomains&amp;lt;/key&amp;gt;
  &amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;yourserver.com&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
      &amp;lt;!--Include to allow subdomains--&amp;gt;
      &amp;lt;key&amp;gt;NSIncludesSubdomains&amp;lt;/key&amp;gt;
      &amp;lt;true/&amp;gt;
      &amp;lt;!--Include to allow HTTP requests--&amp;gt;
      &amp;lt;key&amp;gt;NSTemporaryExceptionAllowsInsecureHTTPLoads&amp;lt;/key&amp;gt;
      &amp;lt;true/&amp;gt;
      &amp;lt;!--Include to specify minimum TLS version--&amp;gt;
      &amp;lt;key&amp;gt;NSTemporaryExceptionMinimumTLSVersion&amp;lt;/key&amp;gt;
      &amp;lt;string&amp;gt;TLSv1.1&amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
  &amp;lt;/dict&amp;gt;
&amp;lt;/dict&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http&quot;&gt;http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Mar 2016 11:02:00 +0100</pubDate>
        <link>http://localhost:4000/2016/03/23/app-transport-blocked-error/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/03/23/app-transport-blocked-error/</guid>
        
        
      </item>
    
      <item>
        <title>Removing directory not found warning from Xcode</title>
        <description>&lt;p&gt;I solved this warning removing the following setting: “$(SDKROOT)/Developer/Library/Frameworks”
This options is located in Settings -&amp;gt; Build Settings -&amp;gt; Search Paths -&amp;gt; Framework Search Paths&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/setting-location.png&quot; alt=&quot;Setting location&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My project continues compiling and working fine, after removing this option.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/32040038/warning-directory-not-found-for-option-error-on-build/36017148#36017148&quot;&gt;http://stackoverflow.com/questions/32040038/warning-directory-not-found-for-option-error-on-build&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Mar 2016 00:02:00 +0100</pubDate>
        <link>http://localhost:4000/2016/03/16/remove-directory-warning/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/03/16/remove-directory-warning/</guid>
        
        
      </item>
    
      <item>
        <title>Test scan QR NPD</title>
        <description>&lt;p&gt;Scan the QR code at the bottom of this image&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Martin.jpg&quot; alt=&quot;QR to Scan&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 03:50:00 +0200</pubDate>
        <link>http://localhost:4000/2015/08/26/code-qr/</link>
        <guid isPermaLink="true">http://localhost:4000/2015/08/26/code-qr/</guid>
        
        
      </item>
    
      <item>
        <title>To solve retain cycle leak using self inside blocks</title>
        <description>
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;__weak id weakSelf = self;
[someObject someMethodWithBlock:^{    
[weakSelf someOtherMethod];
}] &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Mon, 06 Jul 2015 03:50:00 +0200</pubDate>
        <link>http://localhost:4000/2015/07/06/solve-retain-cycle-leak-using-self-inside-blocks/</link>
        <guid isPermaLink="true">http://localhost:4000/2015/07/06/solve-retain-cycle-leak-using-self-inside-blocks/</guid>
        
        
      </item>
    
      <item>
        <title>Install Bootstrap into Rails apps</title>
        <description>&lt;p&gt;Actually you don’t need gem for this, here is the step to install Bootstrap 3 in RoR&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/twbs/bootstrap/releases/download/v3.0.0/bootstrap-3.0.0-dist.zip&quot;&gt;Download&lt;/a&gt; Bootstrap&lt;/li&gt;
  &lt;li&gt;Copy:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;bootstrap/dist/css/bootstrap.css and bootstrap/dist/css/bootstrap.min.css&lt;/p&gt;

&lt;p&gt;To: vendor/assets/stylesheets&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copy:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;bootstrap/dist/js/bootstrap.js and bootstrap/dist/js/bootstrap.min.js&lt;/p&gt;

&lt;p&gt;To: vendor/assets/javascripts&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Update: app/assets/stylesheets/application.css by adding:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.min&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Update: app/assets/javascripts/application.jsby adding:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;//=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.min&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this you can update bootstrap any time you want, don’t need to wait gem to be updated. Also with this approach assets pipeline will use minified versions in production.&lt;/p&gt;

&lt;p&gt;(Source: &lt;a href=&quot;http://stackoverflow.com/questions/18371318/installing-bootstrap-3-on-rails-app&quot;&gt;http://stackoverflow.com/questions/18371318/installing-bootstrap-3-on-rails-app&lt;/a&gt;)&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jun 2015 19:15:00 +0200</pubDate>
        <link>http://localhost:4000/2015/06/29/bootstrap-rails/</link>
        <guid isPermaLink="true">http://localhost:4000/2015/06/29/bootstrap-rails/</guid>
        
        
      </item>
    
  </channel>
</rss>
